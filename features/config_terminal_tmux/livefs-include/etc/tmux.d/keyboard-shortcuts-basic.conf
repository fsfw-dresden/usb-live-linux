# prefix, CTRL+a: activate previously selected pane
bind-key C-a last-pane
bind-key -n M-a last-pane

# CTRL+b: activate previously selected window
bind-key -n C-b last-window

# unbind default CTRL+b action (page up)
unbind-key -T copy-mode-vi C-b

# prefix, *: a pipe
bind-key '*' send-keys "|"

# prefix, &: ask to kill this tmux instance with all sessions
bind-key '&' confirm-before kill-server

# prefix, #: ask to kill the current pane
bind-key '#' confirm-before -p "kill-pane #P? (y/n)" kill-pane

# prefix, G: go to the pane of a running process
bind-key G command-prompt -p "PID of pane to go to:" "run-shell 'tmux-goto-pid %%'"

# prefix, X: ask to kill the current window
bind-key 'X' confirm-before -p "kill-window #W? (y/n)" kill-window

# prefix, R: reset and restart this pane
bind-key R respawn-pane -k

# CTRL+y: select the next pane and show pane numbers
unbind-key -T copy-mode-vi C-y
bind-key -n M-y select-pane -t :.+ \; display-panes -b

# Shift arrow to switch windows
bind-key -n S-Left  previous-window
bind-key -n S-Right next-window

# and a fallback for VTs that don't handle Shift-Cursor key
bind-key -n C-q previous-window
bind-key -n C-w next-window

# Rotate / swap window panes
bind-key -n C-O rotate-window
bind-key -n C-o swap-pane -Ud
bind-key -n M-o swap-pane -Dd

# engage tmux scrollback copy-mode
bind-key Escape copy-mode

# list of standard keyboard shortcuts
bind-key m-h display-popup -w 95% -h 95% -E -T "TMUX standard keyboard shortcuts (press [q] to quit, [/] to search)" 'tmux list-keys -N | ccza | less -SR'

# list of custom keyboard shortcuts on F1
bind-key F1 display-popup -w 95% -h 95% -E -T "TMUX custom keyboard shortcuts (press [q] to quit, [/] to search)" 'cat /etc/tmux.d/keyboard-shortcuts-*.conf | vim --cmd "let no_plugin_maps = 1" --cmd "set noswapfile" -c "runtime! macros/less.vim" -c ":silent :file /etc/tmux.d/keyboard-shortcuts-\*.conf" -'

# quick access to important tools
bind-key C-n split-window -l 90% -c '#{pane_current_path}' 'tmux-pane-wrap gdu -xaB'
bind-key N new-window -c '#{pane_current_path}' 'tmux-pane-wrap gdu -xaB'
bind-key C-h new-window -c '#{pane_current_path}' htop

# unbind-key -T vi-copy F
# bind-key -T vi-copy End end-of-line
# bind-key -cT vi-copy End end-of-line
# bind-key -T vi-edit End end-of-line
# bind-key -cT vi-edit End end-of-line
# bind-key -T emacs-edit End end-of-line
# bind-key -cT emacs-edit End end-of-line
# bind-key -T emacs-copy End end-of-line
# bind-key -cT emacs-copy End end-of-line

bind-key 'p' paste-buffer

# adapted WINDOW_TREE_DEFAULT_FORMAT (see tmux/window-tree.c)
bind-key Tab choose-tree -wZF \
"#{?pane_format, \
#{?#{==:#{pane_title},#{host}},#{pane_current_command},#{pane_title}} (#{pane_start_command}) #{pane_width}x#{pane_height} #{pane_tty}, \
#{?window_format, \
#{window_name}#{window_flags}  \
(#{window_panes} panes) \
#{?#{==:#{window_panes},1}, (#{pane_start_command}) #{pane_tty}\,}, \
#{session_windows} windows \
#{?session_grouped,  \
(group #{session_group}:  \
#{session_group_list}), \
} \
#{?session_attached, (attached),} \
} \
}"

bind-key -r Space next-layout

bind-key w split-window -l 5 "LANG=C qalc"
bind-key W command-prompt -p "watch -c -d -n 0.2:" "split-window -v -c '#{pane_current_path}' 'watch -c -d -n 0.2 -- %1'"
bind-key C-l new-window -c "#{pane_current_path}" "tmux-pane-wrap -v bit; tmux-pane-respawn-prompt"

# keep scrollback history of window intact, panes have to be killed explicitly
bind-key . set-window-option remain-on-exit\; display-message "remain-on-exit is now #{remain-on-exit}"

# go to virtual terminal 1 (alt. to CTRL-ALT-F1)
bind-key \; split-window -l 1 "chvt 1"
bind-key t split-window -l 80% -c "#{pane_current_path}" 'tmux-pane-wrap tig --all'
bind-key T new-window -c "#{pane_current_path}" "tree-less -f"
bind-key i new-window -c "#{pane_current_path}" "ipython3"
bind-key f command-prompt -p "fdfind --no-ignore --hidden --full-path:" "new-window -c '#{pane_current_path}' -n fdfind(%1) '{ lstrail .; echo; fdfind --no-ignore --hidden -X ls --color=always -ladh {} \\; %1; }|&less -R --shift 1 -PM\"fdfind %1\\: ?f%f .?n?m(%T %i of %m) ..?ltlines %lt-%lb?L/%L. :byte %bB?s/%s. .?e(END) ?x- Next\\: %x.:?pB%pB\\%..%t\"'"
bind-key F command-prompt -p "tail -F:" "new-window -c \"#{pane_current_path}\" 'ls --color=auto -Flah --time-style=+\" %^a %F %R\" \"%1\"; tail --lines=45 -F \"%%\"|ccze -A -o nolookups'"
bind-key C-F command-prompt -p "log navigator:" "new-window -n \"%1\" 'lnav \"%1\"'"

bind-key O new-window -n intkern 'TERM=xterm watch -t -d -n 0.2 column -x /proc/vmstat' \;\
		split-window -dl 10 'TERM=xterm watch -t -d -n 0.2 "iostat  -mx|sed /^$/d"' \;\
		split-window -dl 8 'TERM=xterm watch -t -d -n 0.2 swapon -s' \;\
		set-window-option -q window-status-style fg=red

bind-key U new-window -n eth0net 'TERM=xterm iftop -c /etc/iftoprc -i eth0' \;\
		split-window -l 65% 'speedometer -t eth0 -m $((2**25))' \;\
		split-window -l 65% 'speedometer -r eth0 -m $((2**25))' \;\
		set-window-option -q window-status-style fg=blue

bind-key I new-window -n wlan0net 'TERM=xterm iftop -c /etc/iftoprc -i wlan0' \;\
		split-window -l 65% 'speedometer -r wlan0 -m $((2**25))' \;\
		split-window -l 65% 'speedometer -t wlan0 -m $((2**25))' \;\
		set-window-option -q window-status-style fg=cyan
		#split-window -l 65% 'speedometer -r wlan0 -l -m $((2**21))' \;\
		#set-option -q set-remain-on-exit on \;\
		#split-window -l 50% 'nethogs wlan0' \;\
		#set-option -q set-remain-on-exit off \;\

# resize panes like vim
bind-key -r < resize-pane -L 1
bind-key -r > resize-pane -R 1
bind-key -r - resize-pane -D 1
bind-key -r + resize-pane -U 1
bind-key Home resize-pane -U 100
bind-key End resize-pane -D 100

# ALT+z: toggle zoom/fullscreen of current pane
bind-key -n M-z resize-pane -Z

bind-key -r '"' resize-pane -Z

#bind-key -n CM-Up resize-pane -U 5 
#bind-key -n CM-Down resize-pane -D 5
#bind-key -n CM-Left resize-pane -L 5
#bind-key -n CM-Right resize-pane -R 5
#bind-key -n C-KP5 resize-pane -U
#bind-key -n C-KP2 resize-pane -D
#bind-key -n C-KP1 resize-pane -L
#bind-key -n C-KP3 resize-pane -R

# more intuitive keybindings for splitting
#unbind-key %
#bind-key h split-window -h -c "#{pane_current_path}"
bind-key v split-window -v -c "#{pane_current_path}"
bind-key c new-window -c "#{pane_current_path}"
