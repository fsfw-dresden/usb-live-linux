# Stick CI

image: debian:11

before_script:
  - echo "Before script section"

  # Log details about runner environment
  - pwd
  - ls -lah
  - df -h
  - findmnt
  - du -sh
  - date
  - uname -a
  - cat /proc/cmdline
  - cat /proc/mounts

  # copy kali-linux workaround for /builds being mounted nodev, c.f.
  # https://gitlab.com/kalilinux/build-scripts/kali-docker/-/commit/e8cef69
  - mkdir -pv /work
  - cp -a ${PWD} /work/
  - cd /work/${PWD##*/}
  - pwd
  - cd /work/usb-live-linux
  - pwd

  # bash?!
  - bash -xc '[[ "foo" =~ ".oo" ]] && echo success || echo fail'

  # If local cache folder exists, bind mount it into build folder
  - bash -xc '[ -d /work/cache ]
    && mkdir -pv /work/usb-live-linux/build/cache
    && mount -v --bind /work/cache /work/usb-live-linux/build/cache'
  - ls -lah /work/usb-live-linux/build/cache
  - findmnt


after_script:
  - echo "After script section"
  - pwd
  - df -h
  - findmnt
  - du -sh
  - date

  # If local cache folder exists, remove bind mount in build folder
  - bash -xc '[ -d /work/cache ]
    && umount -v /work/usb-live-linux/build/cache'


build_stick_iso:
  stage: build
  tags:
    - base
  script:
    - pwd
    #- cd /work/usb-live-linux
    # Fail early if device nodes can not be created
    - echo "If this fails, /[work] is mounted nodev"; mknod test b 1 2 && rm test

    # Fetch package lists so installations can be performed
    - apt update
    - apt list --upgradable

    # Install build prerequisites
    - apt install -y --no-install-recommends aptitude bash bash-completion ca-certificates ccze curl dbus dialog dosfstools f2fs-tools fatattr gallery-dl git grub-efi-ia32-bin grub-pc-bin html-xml-utils jq libcdio-utils libnbd-bin live-build make nbdkit nocache pandoc parted patch pigz pipemeter qemu-utils ranger rsync shim-signed syslinux-common systemd-container tig unzip wget youtube-dl grub-efi-amd64-signed

    # what do we have here
    - apt-cache policy aptitude bash bash-completion ca-certificates ccze curl dbus dialog dosfstools f2fs-tools fatattr gallery-dl git grub-efi-ia32-bin grub-pc-bin html-xml-utils jq libcdio-utils libnbd-bin live-build make nbdkit nocache pandoc parted patch pigz pipemeter qemu-utils ranger rsync shim-signed syslinux-common systemd-container tig unzip wget youtube-dl
#    - apt-cache policy rsync pandoc debian-archive-keyring lbzip2 python3-pip grub-pc-bin grub-efi-amd64-bin grub-efi-amd64-signed grub-efi-ia32-bin shim-signed grub-rescue-pc syslinux-common parted fatattr dosfstools f2fs-tools libcdio-utils dialog ccze
    - dpkg -l aptitude bash bash-completion ca-certificates ccze curl dbus dialog dosfstools f2fs-tools fatattr gallery-dl git grub-efi-ia32-bin grub-pc-bin html-xml-utils jq libcdio-utils libnbd-bin live-build make nbdkit nocache pandoc parted patch pigz pipemeter qemu-utils ranger rsync shim-signed syslinux-common systemd-container tig unzip wget youtube-dl
#    - dpkg -l rsync pandoc debian-archive-keyring lbzip2 python3-pip grub-pc-bin grub-efi-amd64-bin grub-efi-amd64-signed grub-efi-ia32-bin shim-signed grub-rescue-pc syslinux-common parted fatattr dosfstools f2fs-tools libcdio-utils dialog ccze

    # Uncomment to turn on live-build debugging if needed
    # - sed -ri 's/lb build/lb build --debug/' /work/usb-live-linux/scripts/build-live-iso

    # Trigger actual build process
    - scripts/build-live-iso TEST-Microstick:bullseye

    # Make sure local target folder exists
    - mkdir -pv /work/artifacts

    # Move ISO to local folder
    - mv -v /work/usb-live-linux/artifacts/*.iso /work/artifacts/'

    # Copy other artifacts & build log over to be attached as pipeline results
    - cp -av /work/usb-live-linux/artifacts "/${CI_PROJECT_DIR/"
    - cp -av /work/usb-live-linux/build/*.log "/${CI_PROJECT_DIR/build/"

    # Move those other artifacts to local folder, too
    - mv -v /work/usb-live-linux/artifacts/*.* /work/artifacts/'

    - ls -lahd $CI_PROJECT_DIR

  artifacts:
    paths:
      - artifacts/
      - build/*.log
    exclude:
      - artifacts/*.iso

#  cache:
#    key: bullseye
#    paths:
#      - /work/usb-live-linux/build/cache/