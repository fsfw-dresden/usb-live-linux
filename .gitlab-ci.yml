# Stick Build CI

image: debian:11

before_script:
  - echo "Before script section"

  # Log details about runner
  - date
  - uname -a
  - cat /proc/cmdline
  - cat /proc/mounts
  - findmnt
  - df -h

  # .. environment variables
  - env
  - env | sort

  # .. source directory
  - pwd
  - ls -lah
  - du -sh

  # what is in the /work already?
  - "[ ! -d /work ] || ls -lah /work"

  # Use kali-linux's workaround for /builds being mounted nodev, c.f.
  # https://gitlab.com/kalilinux/build-scripts/kali-docker/-/commit/e8cef69
  - mkdir -pv /work
  - cp -a ${CI_PROJECT_DIR} /work/
  - cd /work/usb-live-linux
  - pwd

  # Fail early if device nodes can not be created
  - echo "If this fails, /[work] is mounted nodev"; mknod test b 1 2 && rm test

  # Fetch package lists so installations can be performed
  - apt update
  - apt list --upgradable

  # Install build prerequisites
  - apt install -y --no-install-recommends aptitude bash bash-completion ca-certificates ccze curl dbus dialog dosfstools f2fs-tools fatattr gallery-dl git grub-efi-ia32-bin grub-pc-bin html-xml-utils jq libcdio-utils libnbd-bin live-build make nbdkit nocache pandoc parted patch pigz pipemeter qemu-utils ranger rsync shim-signed syslinux-common systemd-container tig unzip wget youtube-dl grub-efi-amd64-signed

  # show available package versions
  - apt-cache policy aptitude bash bash-completion ca-certificates ccze curl dbus dialog dosfstools f2fs-tools fatattr gallery-dl git grub-efi-ia32-bin grub-pc-bin html-xml-utils jq libcdio-utils libnbd-bin live-build make nbdkit nocache pandoc parted patch pigz pipemeter qemu-utils ranger rsync shim-signed syslinux-common systemd-container tig unzip wget youtube-dl

  # show installed package versions
  - dpkg -l aptitude bash bash-completion ca-certificates ccze curl dbus dialog dosfstools f2fs-tools fatattr gallery-dl git grub-efi-ia32-bin grub-pc-bin html-xml-utils jq libcdio-utils libnbd-bin live-build make nbdkit nocache pandoc parted patch pigz pipemeter qemu-utils ranger rsync shim-signed syslinux-common systemd-container tig unzip wget youtube-dl

  # because the .deb files are hard-linked by live-build,
  # cache folder can not be bind mounted (!)
  # So mv cache folder into build dir if it exists
  - bash -xc '[ -d /work/cache ]
    && mv -v /work/cache /work/usb-live-linux/build/'

after_script:
  - echo "After script section"
  - pwd
  - du -sh
  - df -h
  - findmnt
  - env | sort
  - date

  # move back the cache folder
  - mv -v /work/usb-live-linux/build/cache /work/
  - ls -lah /work/usb-live-linux/build/

  # prune the work copy
  - rm -r /work/usb-live-linux/

build_stick_iso:
  stage: build
  tags:
    - base
  script:
    - pwd
    #- cd /work/usb-live-linux

    # Uncomment to turn on live-build debugging if needed
    # - sed -ri 's/lb build/lb build --debug/' /work/usb-live-linux/scripts/build-live-iso

    - sed -i 's/CACHE_DIR=/set -x; CACHE_DIR=/' scripts/functions.bash
    # Trigger actual build process
    - scripts/build-live-iso FSFW-Schulstick

    # Make sure local target folder exists
    - mkdir -pv /work/artifacts

    # Move ISO to local folder
    - mv -v /work/usb-live-linux/artifacts/*.iso /work/artifacts/

    # Copy other artifacts & build log over to be attached as pipeline results
    - cp -av /work/usb-live-linux/artifacts "/${CI_PROJECT_DIR}/"
    - cp -av /work/usb-live-linux/build/*.log "/${CI_PROJECT_DIR}/build/"

    # Move those other artifacts to local folder, too
    - mv -v /work/usb-live-linux/artifacts/*.* /work/artifacts/

    - ls -lah ${CI_PROJECT_DIR}

  artifacts:
    paths:
      - artifacts/
      - build/*.log
    exclude:
      - artifacts/*.iso

build_distribution_image:
  stage: build
  tags:
    - base
  needs: ['build_stick_iso']
  script:
    - pwd
    - export IMAGE_NAME=$(bash -xc 'source scripts/functions.bash && get_image_name')
    - scripts/create_distribution_image "${IMAGE_NAME}"

    # move out the created image, checksum and block map
    - mv -v /work/usb-live-linux/artifacts/*.* /work/artifacts/

#  cache:
#    key: bullseye
#    paths:
#      - /work/usb-live-linux/build/cache/
